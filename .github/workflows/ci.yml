# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
#     inputs:
#       full:
#         description: 'is full'
#         required: false

# concurrency: staging_environment

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  firstJob:
    name: build
    strategy:
      max-parallel: 1
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run a script
        id: check-file-exists
        run: |
          sudo mkdir -p ./markdown-pages
          [ "$(ls -A ./markdown-pages)" ] || echo "::set-output name=isEmpty::true"

      - name: Run a script
        if: ${{ github.event.client_payload.download_type == 'full' || steps.check-file-exists.outputs.isEmpty }}
        run: |
          echo ${{ steps.check-file-exists.outputs.isEmpty }}
          echo "step above is ture"

      # - name: sleep
      #   run: |
      #     sleep 180

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  # second:
  #   needs: firstJob
  #   name: test container
  #   strategy:
  #     max-parallel: 1
  #   runs-on: ubuntu-latest
  #   container:
  #     image: andelf/doc-build:0.1.9
  #   steps:
  #     - run: |
  #         sudo mkdir -p test
  #         sudo chmod 777 -R test
  #     - uses: actions/checkout@v3
  #       with:
  #         repository: pingcap-inc/enterprise-docs
  #         token: ${{ secrets.GH_FULL_REPO }}
  #         path: test
  #     - uses: actions/checkout@v3
  #       with:
  #         repository: pingcap/docs
  #         token: ${{ secrets.GH_FULL_REPO }}
  #         path: test/enterprise-docs/docs
  #     - run: |
  #         sudo mkdir -p nvm
  #         sudo chmod 777 nvm
  #         cd nvm
  #         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | sh
  #         export NVM_DIR="$HOME/.nvm"
  #         [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  #         nvm install 16
  #         node -v
  #     - uses: actions/upload-artifact@master
  #       with:
  #         name: my-artifact
  #         path: test/enterprise-doc/docs/TOC.md

  # third:
  #   needs: second
  #   name: test container pass files
  #   strategy:
  #     max-parallel: 1
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - uses: actions/download-artifact@master
  #       with:
  #         name: my-artifact
  #         path: test/enterprise-doc/docs/TOC.md
  #     - name: Display structure of downloaded files
  #       run: ls -R
  #       working-directory: test/enterprise-doc/docs

  secondJob:
    name: build
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v3
      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Run scripts
        run: |
          cd docsearch
          echo "APPLICATION_ID=${{ secrets.GATSBY_ALGOLIA_APPLICATION_ID }}\nAPI_KEY=${{ secrets.GATSBY_ALGOLIA_API_KEY }}\nGITHUB_AUTH_TOKEN=${{ secrets.GH_AUTH_TOKEN }}" > .env
          export DOCKER_REGISTRY="${{ secrets.DOCKER_REGISTRY }}"
          docker run --rm --env-file=.env -e 'CONFIG={"index_name":"zh-tidb-v6.0","docs_info":{"owner":"pingcap","docs_repo":"docs-cn","ref":"release-6.0","docs_prefix":"tidb","lang":"zh","version":"v6.0"},"start_urls":[],"crawl_local_url":"","delete_urls":[],"sitemap_urls":["https://docs.pingcap.com/sitemap/sitemap-index.xml"],"selectors":{"default":{"lvl0":".doc-content h1","lvl1":".doc-content h2","lvl2":".doc-content h3","lvl3":".doc-content h4","lvl4":".doc-content h5","text":".doc-content p, .doc-content li, .doc-content table tr, .doc-content code span"}},"selectors_exclude":[".error"],"custom_settings":{"attributesForFaceting":["url_without_anchor"],"attributesToHighlight":["content","url","hierarchy"],"attributeForDistinct":"url_without_anchor","distinct":true,"disableTypoToleranceOnWords":["mva","tiup","tiops","tidb4.0","tidb 4.0"]},"conversation_id":["428916846"],"only_content_level":true,"nb_hits":159018}' -e  "ISINCREMENTAL=True" -v `pwd`/algolia_configs:/data $DOCKER_REGISTRY/algolia-docsearch-scraper-incremental:v0.2
          # echo `pwd`/docsearch
          # ls -R
          # ./run-algolia-crawler-incrementally.sh `pwd`
          # git status
